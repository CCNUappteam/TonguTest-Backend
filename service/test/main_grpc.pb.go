// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: main.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Upload_SendImage_FullMethodName = "/test.Upload/SendImage"
)

// UploadClient is the client API for Upload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadClient interface {
	SendImage(ctx context.Context, opts ...grpc.CallOption) (Upload_SendImageClient, error)
}

type uploadClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadClient(cc grpc.ClientConnInterface) UploadClient {
	return &uploadClient{cc}
}

func (c *uploadClient) SendImage(ctx context.Context, opts ...grpc.CallOption) (Upload_SendImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Upload_ServiceDesc.Streams[0], Upload_SendImage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &uploadSendImageClient{stream}
	return x, nil
}

type Upload_SendImageClient interface {
	Send(*Data) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type uploadSendImageClient struct {
	grpc.ClientStream
}

func (x *uploadSendImageClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploadSendImageClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UploadServer is the server API for Upload service.
// All implementations must embed UnimplementedUploadServer
// for forward compatibility
type UploadServer interface {
	SendImage(Upload_SendImageServer) error
	mustEmbedUnimplementedUploadServer()
}

// UnimplementedUploadServer must be embedded to have forward compatible implementations.
type UnimplementedUploadServer struct {
}

func (UnimplementedUploadServer) SendImage(Upload_SendImageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendImage not implemented")
}
func (UnimplementedUploadServer) mustEmbedUnimplementedUploadServer() {}

// UnsafeUploadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadServer will
// result in compilation errors.
type UnsafeUploadServer interface {
	mustEmbedUnimplementedUploadServer()
}

func RegisterUploadServer(s grpc.ServiceRegistrar, srv UploadServer) {
	s.RegisterService(&Upload_ServiceDesc, srv)
}

func _Upload_SendImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploadServer).SendImage(&uploadSendImageServer{stream})
}

type Upload_SendImageServer interface {
	SendAndClose(*Response) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type uploadSendImageServer struct {
	grpc.ServerStream
}

func (x *uploadSendImageServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploadSendImageServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Upload_ServiceDesc is the grpc.ServiceDesc for Upload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Upload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.Upload",
	HandlerType: (*UploadServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendImage",
			Handler:       _Upload_SendImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "main.proto",
}
